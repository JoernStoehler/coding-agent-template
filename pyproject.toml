[project]
name = "coding-agent"
version = "0.1.0"
description = "Template for AI-powered coding agent projects"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "pydantic>=2.0.0",
    "python-dotenv>=1.0.0",
    "python-json-logger>=2.0.7",
    "httpx>=0.25.0",
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "opentelemetry-exporter-otlp>=1.21.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "pytest-benchmark>=4.0.0",
    "ruff>=0.1.9",
    "pyright>=1.1.342",
    "pre-commit>=3.5.0",
    "ipython>=8.17.0",
]

[project.urls]
Repository = "https://github.com/yourusername/coding-agent"
Documentation = "https://github.com/yourusername/coding-agent/docs"
Issues = "https://github.com/yourusername/coding-agent/issues"

[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

# Ruff configuration
[tool.ruff]
target-version = "py39"
line-length = 100
fix = true

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "C",      # flake8-comprehensions
    "B",      # flake8-bugbear
    "UP",     # pyupgrade
    "ARG",    # flake8-unused-arguments
    "C4",     # flake8-comprehensions
    "EM",     # flake8-errmsg
    "ICN",    # flake8-import-conventions
    "ISC",    # flake8-implicit-str-concat
    "G",      # flake8-logging
    "PGH",    # pygrep-hooks
    "PIE",    # flake8-pie
    "PL",     # pylint
    "PT",     # flake8-pytest-style
    "PTH",    # flake8-use-pathlib
    "RET",    # flake8-return
    "RUF",    # Ruff-specific
    "SIM",    # flake8-simplify
    "T20",    # flake8-print
    "TID",    # flake8-tidy-imports
    "TCH",    # flake8-type-checking
    "YTT",    # flake8-2020
    "EXE",    # flake8-executable
    "NPY",    # NumPy-specific rules
    "PD",     # pandas-vet
]

ignore = [
    "PLR0913",  # Too many arguments to function call
    "PLR2004",  # Magic value used in comparison
    "SIM108",   # Use ternary operator (not always more readable)
    "E501",     # Line too long (handled by formatter)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["PLR2004", "S101", "TID252"]
"scripts/*" = ["T20"]

[tool.ruff.lint.isort]
known-first-party = ["src"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["classmethod", "pydantic.field_validator"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# Pyright configuration
[tool.pyright]
include = ["src", "tests"]
exclude = [
    "**/__pycache__",
    "**/.pytest_cache",
    "**/.mypy_cache",
    "**/.ruff_cache",
    "build",
    "dist",
]
typeCheckingMode = "standard"
pythonVersion = "3.9"
pythonPlatform = "Linux"
reportMissingImports = true
reportMissingTypeStubs = false
reportUnknownMemberType = false
reportUnknownArgumentType = false
reportUnknownVariableType = false
reportUnknownLambdaType = false
reportUnknownParameterType = false
reportGeneralTypeIssues = true
reportOptionalSubscript = true
reportOptionalMemberAccess = true
reportOptionalCall = true
reportOptionalIterable = true
reportOptionalContextManager = true
reportOptionalOperand = true
reportUnnecessaryTypeIgnoreComment = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true
parallel = true
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# Bandit security configuration
[tool.bandit]
targets = ["src"]
skips = ["B101", "B601"]
exclude_dirs = ["tests", "scripts"]

# Setuptools configuration
[tool.setuptools]
packages = ["src"]

[tool.setuptools.package-data]
"*" = ["*.md", "*.json", "*.yaml", "*.yml"]