{
  "name": "Coding Agent Infrastructure",
  "build": {
    "dockerfile": "Dockerfile"
  },
  "workspaceFolder": "/workspaces/coding-agent",
  // Configure container user (vscode is the default for devcontainers)
  "remoteUser": "vscode",
  // VSCode settings (using committed .vscode/settings.json instead)
  "customizations": {
    "vscode": {
      // Why these extensions: Core language support (Python/JS/TS), syntax highlighting
      // for common configs (YAML/TOML/JSON), and integrations for tools agents use
      // (Git, GitHub Actions, linting). Forked repos can customize as needed.
      "extensions": [
        // Python development
        "ms-python.python",
        "ms-python.black-formatter",
        "charliermarsh.ruff",
        // JavaScript/TypeScript
        "ms-vscode.vscode-typescript-next",
        "dbaeumer.vscode-eslint",
        // Config file formats
        "ms-vscode.vscode-json",
        "redhat.vscode-yaml",
        "tamasfe.even-better-toml",
        "mechatroner.rainbow-csv",
        // Developer tools
        "mhutchie.git-graph",
        "github.vscode-github-actions",
        "ms-vscode-remote.remote-containers",
        // Template syntax highlighting
        "samuelcolvin.jinjahtml"
      ]
    }
  },
  // Port forwarding for agent web servers
  // Why: These are common development ports. 5000=main app, 3000-3002=agent range,
  // 8080=alternative web server. VSCode auto-forwards when processes bind to these.
  "forwardPorts": [
    5000,    // Main application (Flask default)
    3000,    // Agent base port (agents get 3000, 3010, 3020...)
    3001,    // Common dev server ports
    3002,
    8080     // Alternative HTTP port
  ],
  "portsAttributes": {
    "5000": {
      "label": "Main App",
      "onAutoForward": "notify"
    },
    "3000": {
      "label": "Agent Port Base",
      "onAutoForward": "silent"  // Why: Don't notify for agent ports to reduce noise
    }
  },
  // Environment variables (loaded from .env via direnv)
  "containerEnv": {
    "CLAUDE_CONFIG_DIR": "/home/vscode/.claude"
  },
  // Mount points for development
  "mounts": [
    // Mount parent workspaces directory to enable agent worktrees
    // Why: Agents create git worktrees as siblings to main repo, so we need parent dir access
    "source=${localWorkspaceFolder}/..,target=/workspaces,type=bind,consistency=cached",
    // Git credentials from host
    // Why: Use host's git identity and settings without reconfiguration
    "source=${localEnv:HOME}/.gitconfig,target=/home/vscode/.gitconfig,type=bind,consistency=cached",
    // SSH keys for git operations
    // Why: Reuse host's SSH keys for GitHub/GitLab authentication
    "source=${localEnv:HOME}/.ssh,target=/home/vscode/.ssh,type=bind,consistency=cached",
    // Persistent auth and configs (Docker named volumes)
    // Why: Named volumes persist across container rebuilds, unlike bind mounts.
    // This preserves authentication tokens and settings when updating the container.
    "source=claude_auth,target=/home/vscode/.claude,type=volume",
    "source=gemini_auth,target=/home/vscode/.gemini,type=volume",
    "source=gh_auth,target=/home/vscode/.config/gh,type=volume",
    "source=bash_history_data,target=/home/vscode/.bash_history_dir,type=volume",
    // Persistent direnv allows
    // Why: direnv requires explicit trust for each .envrc file for security.
    // Persisting these approvals avoids re-approving after container rebuild.
    "source=direnv_data,target=/home/vscode/.local/share/direnv,type=volume"
  ],
  // Post-create setup
  "postCreateCommand": ".devcontainer/postCreateCommand.sh",
  // Start background services on every container start
  "postStartCommand": ".devcontainer/postStartCommand.sh",
  // Very time consuming, so we use none
  // Why: Dev container features would add build time. We install everything
  // we need directly in the Dockerfile for better control and faster rebuilds.
  "features": {}
}